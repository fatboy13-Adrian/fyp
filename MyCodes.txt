//include all the hex files needed for this program
#include "lwip/opt.h"		//opt
#include "lwip/arch.h"		//arch
#include "lwip/api.h"		//api
#include "lwip/inet.h"		//inet
#include "lwip/sockets.h"	//sockets
#include "fs.h"			//fs
#include "fsdata.h"		//fsdata
#include "string.h"		//string
#include "httpserver-socket.h"	//httpserver-socket

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
#define WEBSERVER_THREAD_PRIO    ( tskIDLE_PRIORITY + 3 )

/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
u32_t nPageHits = 0;
portCHAR PAGE_BODY[512];

//Format of dynamic web page: the page header
static const unsigned char PAGE_START[] = {
0x3c,0x21,0x44,0x4f,0x43,0x54,0x59,0x50,0x45,0x20,0x68,0x74,0x6d,0x6c,0x20,0x50,
0x55,0x42,0x4c,0x49,0x43,0x20,0x22,0x2d,0x2f,0x2f,0x57,0x33,0x43,0x2f,0x2f,0x44,
0x54,0x44,0x20,0x48,0x54,0x4d,0x4c,0x20,0x34,0x2e,0x30,0x31,0x2f,0x2f,0x45,0x4e,
0x22,0x20,0x22,0x68,0x74,0x74,0x70,0x3a,0x2f,0x2f,0x77,0x77,0x77,0x2e,0x77,0x33,
0x2e,0x6f,0x72,0x67,0x2f,0x54,0x52,0x2f,0x68,0x74,0x6d,0x6c,0x34,0x2f,0x73,0x74,
0x72,0x69,0x63,0x74,0x2e,0x64,0x74,0x64,0x22,0x3e,0x0d,0x0a,0x3c,0x68,0x74,0x6d,
0x6c,0x3e,0x0d,0x0a,0x3c,0x68,0x65,0x61,0x64,0x3e,0x0d,0x0a,0x20,0x20,0x3c,0x74,
0x69,0x74,0x6c,0x65,0x3e,0x53,0x54,0x4d,0x33,0x32,0x46,0x34,0x78,0x37,0x54,0x41,
0x53,0x4b,0x53,0x3c,0x2f,0x74,0x69,0x74,0x6c,0x65,0x3e,0x0d,0x0a,0x20,0x20,0x3c,
0x6d,0x65,0x74,0x61,0x20,0x68,0x74,0x74,0x70,0x2d,0x65,0x71,0x75,0x69,0x76,0x3d,
0x22,0x43,0x6f,0x6e,0x74,0x65,0x6e,0x74,0x2d,0x54,0x79,0x70,0x65,0x22,0x0d,0x0a,
0x20,0x63,0x6f,0x6e,0x74,0x65,0x6e,0x74,0x3d,0x22,0x74,0x65,0x78,0x74,0x2f,0x68,
0x74,0x6d,0x6c,0x3b,0x20,0x63,0x68,0x61,0x72,0x73,0x65,0x74,0x3d,0x77,0x69,0x6e,
0x64,0x6f,0x77,0x73,0x2d,0x31,0x32,0x35,0x32,0x22,0x3e,0x0d,0x0a,0x20,0x20,0x3c,
0x6d,0x65,0x74,0x61,0x20,0x68,0x74,0x74,0x70,0x2d,0x65,0x71,0x75,0x69,0x76,0x3d,
0x22,0x72,0x65,0x66,0x72,0x65,0x73,0x68,0x22,0x20,0x63,0x6f,0x6e,0x74,0x65,0x6e,
0x74,0x3d,0x22,0x31,0x22,0x3e,0x0d,0x0a,0x20,0x20,0x3c,0x6d,0x65,0x74,0x61,0x20,
0x63,0x6f,0x6e,0x74,0x65,0x6e,0x74,0x3d,0x22,0x4d,0x53,0x48,0x54,0x4d,0x4c,0x20,
0x36,0x2e,0x30,0x30,0x2e,0x32,0x38,0x30,0x30,0x2e,0x31,0x35,0x36,0x31,0x22,0x20,
0x6e,0x61,0x6d,0x65,0x3d,0x22,0x47,0x45,0x4e,0x45,0x52,0x41,0x54,0x4f,0x52,0x22,
0x3e,0x0d,0x0a,0x20,0x20,0x3c,0x73,0x74,0x79,0x6c,0x65,0x20,0x3d,0x22,0x66,0x6f,
0x6e,0x74,0x2d,0x77,0x65,0x69,0x67,0x68,0x74,0x3a,0x20,0x6e,0x6f,0x72,0x6d,0x61,
0x6c,0x3b,0x20,0x66,0x6f,0x6e,0x74,0x2d,0x66,0x61,0x6d,0x69,0x6c,0x79,0x3a,0x20,
0x56,0x65,0x72,0x64,0x61,0x6e,0x61,0x3b,0x22,0x3e,0x3c,0x2f,0x73,0x74,0x79,0x6c,
0x65,0x3e,0x0d,0x0a,0x3c,0x2f,0x68,0x65,0x61,0x64,0x3e,0x0d,0x0a,0x3c,0x62,0x6f,
0x64,0x79,0x3e,0x0d,0x0a,0x3c,0x68,0x34,0x3e,0x3c,0x73,0x6d,0x61,0x6c,0x6c,0x20,
0x73,0x74,0x79,0x6c,0x65,0x3d,0x22,0x66,0x6f,0x6e,0x74,0x2d,0x66,0x61,0x6d,0x69,
0x6c,0x79,0x3a,0x20,0x56,0x65,0x72,0x64,0x61,0x6e,0x61,0x3b,0x22,0x3e,0x3c,0x73,
0x6d,0x61,0x6c,0x6c,0x3e,0x3c,0x62,0x69,0x67,0x3e,0x3c,0x62,0x69,0x67,0x3e,0x3c,
0x62,0x69,0x67,0x0d,0x0a,0x20,0x73,0x74,0x79,0x6c,0x65,0x3d,0x22,0x66,0x6f,0x6e,
0x74,0x2d,0x77,0x65,0x69,0x67,0x68,0x74,0x3a,0x20,0x62,0x6f,0x6c,0x64,0x3b,0x22,
0x3e,0x3c,0x62,0x69,0x67,0x3e,0x3c,0x73,0x74,0x72,0x6f,0x6e,0x67,0x3e,0x3c,0x65,
0x6d,0x3e,0x3c,0x73,0x70,0x61,0x6e,0x0d,0x0a,0x20,0x73,0x74,0x79,0x6c,0x65,0x3d,
0x22,0x66,0x6f,0x6e,0x74,0x2d,0x73,0x74,0x79,0x6c,0x65,0x3a,0x20,0x69,0x74,0x61,
0x6c,0x69,0x63,0x3b,0x22,0x3e,0x53,0x54,0x4d,0x33,0x32,0x46,0x34,0x78,0x37,0x20,
0x4c,0x69,0x73,0x74,0x20,0x6f,0x66,0x20,0x74,0x61,0x73,0x6b,0x73,0x20,0x61,0x6e,
0x64,0x0d,0x0a,0x74,0x68,0x65,0x69,0x72,0x20,0x73,0x74,0x61,0x74,0x75,0x73,0x3c,
0x2f,0x73,0x70,0x61,0x6e,0x3e,0x3c,0x2f,0x65,0x6d,0x3e,0x3c,0x2f,0x73,0x74,0x72,
0x6f,0x6e,0x67,0x3e,0x3c,0x2f,0x62,0x69,0x67,0x3e,0x3c,0x2f,0x62,0x69,0x67,0x3e,
0x3c,0x2f,0x62,0x69,0x67,0x3e,0x3c,0x2f,0x62,0x69,0x67,0x3e,0x3c,0x2f,0x73,0x6d,
0x61,0x6c,0x6c,0x3e,0x3c,0x2f,0x73,0x6d,0x61,0x6c,0x6c,0x3e,0x3c,0x2f,0x68,0x34,
0x3e,0x0d,0x0a,0x3c,0x68,0x72,0x20,0x73,0x74,0x79,0x6c,0x65,0x3d,0x22,0x77,0x69,
0x64,0x74,0x68,0x3a,0x20,0x31,0x30,0x30,0x25,0x3b,0x20,0x68,0x65,0x69,0x67,0x68,
0x74,0x3a,0x20,0x32,0x70,0x78,0x3b,0x22,0x3e,0x3c,0x73,0x70,0x61,0x6e,0x0d,0x0a,
0x20,0x73,0x74,0x79,0x6c,0x65,0x3d,0x22,0x66,0x6f,0x6e,0x74,0x2d,0x77,0x65,0x69,
0x67,0x68,0x74,0x3a,0x20,0x62,0x6f,0x6c,0x64,0x3b,0x22,0x3e,0x0d,0x0a,0x3c,0x2f,
0x73,0x70,0x61,0x6e,0x3e,0x3c,0x73,0x70,0x61,0x6e,0x20,0x73,0x74,0x79,0x6c,0x65,
0x3d,0x22,0x66,0x6f,0x6e,0x74,0x2d,0x77,0x65,0x69,0x67,0x68,0x74,0x3a,0x20,0x62,
0x6f,0x6c,0x64,0x3b,0x22,0x3e,0x0d,0x0a,0x3c,0x74,0x61,0x62,0x6c,0x65,0x20,0x73,
0x74,0x79,0x6c,0x65,0x3d,0x22,0x77,0x69,0x64,0x74,0x68,0x3a,0x20,0x39,0x36,0x31,
0x70,0x78,0x3b,0x20,0x68,0x65,0x69,0x67,0x68,0x74,0x3a,0x20,0x33,0x30,0x70,0x78,
0x3b,0x22,0x20,0x62,0x6f,0x72,0x64,0x65,0x72,0x3d,0x22,0x31,0x22,0x0d,0x0a,0x20,
0x63,0x65,0x6c,0x6c,0x70,0x61,0x64,0x64,0x69,0x6e,0x67,0x3d,0x22,0x32,0x22,0x20,
0x63,0x65,0x6c,0x6c,0x73,0x70,0x61,0x63,0x69,0x6e,0x67,0x3d,0x22,0x32,0x22,0x3e,
0x0d,0x0a,0x20,0x20,0x3c,0x74,0x62,0x6f,0x64,0x79,0x3e,0x0d,0x0a,0x20,0x20,0x20,
0x20,0x3c,0x74,0x72,0x3e,0x0d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x3c,0x74,0x64,
0x0d,0x0a,0x20,0x73,0x74,0x79,0x6c,0x65,0x3d,0x22,0x66,0x6f,0x6e,0x74,0x2d,0x66,
0x61,0x6d,0x69,0x6c,0x79,0x3a,0x20,0x56,0x65,0x72,0x64,0x61,0x6e,0x61,0x3b,0x20,
0x66,0x6f,0x6e,0x74,0x2d,0x77,0x65,0x69,0x67,0x68,0x74,0x3a,0x20,0x62,0x6f,0x6c,
0x64,0x3b,0x20,0x66,0x6f,0x6e,0x74,0x2d,0x73,0x74,0x79,0x6c,0x65,0x3a,0x20,0x69,
0x74,0x61,0x6c,0x69,0x63,0x3b,0x20,0x62,0x61,0x63,0x6b,0x67,0x72,0x6f,0x75,0x6e,
0x64,0x2d,0x63,0x6f,0x6c,0x6f,0x72,0x3a,0x20,0x72,0x67,0x62,0x28,0x35,0x31,0x2c,
0x20,0x35,0x31,0x2c,0x20,0x32,0x35,0x35,0x29,0x3b,0x20,0x74,0x65,0x78,0x74,0x2d,
0x61,0x6c,0x69,0x67,0x6e,0x3a,0x20,0x63,0x65,0x6e,0x74,0x65,0x72,0x3b,0x22,0x3e,
0x3c,0x73,0x6d,0x61,0x6c,0x6c,0x3e,0x3c,0x61,0x0d,0x0a,0x20,0x68,0x72,0x65,0x66,
0x3d,0x22,0x2f,0x53,0x54,0x4d,0x33,0x32,0x46,0x34,0x78,0x37,0x2e,0x68,0x74,0x6d,
0x6c,0x22,0x3e,0x3c,0x73,0x70,0x61,0x6e,0x20,0x73,0x74,0x79,0x6c,0x65,0x3d,0x22,
0x63,0x6f,0x6c,0x6f,0x72,0x3a,0x20,0x77,0x68,0x69,0x74,0x65,0x3b,0x22,0x3e,0x48,
0x6f,0x6d,0x65,0x0d,0x0a,0x70,0x61,0x67,0x65,0x3c,0x2f,0x73,0x70,0x61,0x6e,0x3e,
0x3c,0x2f,0x61,0x3e,0x3c,0x2f,0x73,0x6d,0x61,0x6c,0x6c,0x3e,0x3c,0x2f,0x74,0x64,
0x3e,0x0d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x3c,0x74,0x64,0x0d,0x0a,0x20,0x73,
0x74,0x79,0x6c,0x65,0x3d,0x22,0x66,0x6f,0x6e,0x74,0x2d,0x66,0x61,0x6d,0x69,0x6c,
0x79,0x3a,0x20,0x56,0x65,0x72,0x64,0x61,0x6e,0x61,0x3b,0x20,0x66,0x6f,0x6e,0x74,
0x2d,0x77,0x65,0x69,0x67,0x68,0x74,0x3a,0x20,0x62,0x6f,0x6c,0x64,0x3b,0x20,0x66,
0x6f,0x6e,0x74,0x2d,0x73,0x74,0x79,0x6c,0x65,0x3a,0x20,0x69,0x74,0x61,0x6c,0x69,
0x63,0x3b,0x20,0x62,0x61,0x63,0x6b,0x67,0x72,0x6f,0x75,0x6e,0x64,0x2d,0x63,0x6f,
0x6c,0x6f,0x72,0x3a,0x20,0x72,0x67,0x62,0x28,0x35,0x31,0x2c,0x20,0x35,0x31,0x2c,
0x20,0x32,0x35,0x35,0x29,0x3b,0x20,0x74,0x65,0x78,0x74,0x2d,0x61,0x6c,0x69,0x67,
0x6e,0x3a,0x20,0x63,0x65,0x6e,0x74,0x65,0x72,0x3b,0x22,0x3e,0x3c,0x61,0x0d,0x0a,
0x20,0x68,0x72,0x65,0x66,0x3d,0x22,0x53,0x54,0x4d,0x33,0x32,0x46,0x34,0x78,0x37,
0x41,0x44,0x43,0x2e,0x68,0x74,0x6d,0x6c,0x22,0x3e,0x3c,0x73,0x70,0x61,0x6e,0x20,
0x73,0x74,0x79,0x6c,0x65,0x3d,0x22,0x66,0x6f,0x6e,0x74,0x2d,0x77,0x65,0x69,0x67,
0x68,0x74,0x3a,0x20,0x62,0x6f,0x6c,0x64,0x3b,0x22,0x3e,0x3c,0x2f,0x73,0x70,0x61,
0x6e,0x3e,0x3c,0x2f,0x61,0x3e,0x3c,0x73,0x6d,0x61,0x6c,0x6c,0x3e,0x3c,0x61,0x0d,
0x0a,0x20,0x68,0x72,0x65,0x66,0x3d,0x22,0x2f,0x53,0x54,0x4d,0x33,0x32,0x46,0x34,
0x78,0x37,0x54,0x41,0x53,0x4b,0x53,0x2e,0x68,0x74,0x6d,0x6c,0x22,0x3e,0x3c,0x73,
0x70,0x61,0x6e,0x20,0x73,0x74,0x79,0x6c,0x65,0x3d,0x22,0x63,0x6f,0x6c,0x6f,0x72,
0x3a,0x20,0x77,0x68,0x69,0x74,0x65,0x3b,0x22,0x3e,0x4c,0x69,0x73,0x74,0x0d,0x0a,
0x6f,0x66,0x20,0x74,0x61,0x73,0x6b,0x73,0x3c,0x2f,0x73,0x70,0x61,0x6e,0x3e,0x3c,
0x2f,0x61,0x3e,0x3c,0x2f,0x73,0x6d,0x61,0x6c,0x6c,0x3e,0x3c,0x2f,0x74,0x64,0x3e,
0x0d,0x0a,0x20,0x20,0x20,0x20,0x3c,0x2f,0x74,0x72,0x3e,0x0d,0x0a,0x20,0x20,0x3c,
0x2f,0x74,0x62,0x6f,0x64,0x79,0x3e,0x0d,0x0a,0x3c,0x2f,0x74,0x61,0x62,0x6c,0x65,
0x3e,0x0d,0x0a,0x3c,0x62,0x72,0x3e,0x0d,0x0a,0x3c,0x2f,0x73,0x70,0x61,0x6e,0x3e,
0x3c,0x73,0x70,0x61,0x6e,0x20,0x73,0x74,0x79,0x6c,0x65,0x3d,0x22,0x66,0x6f,0x6e,
0x74,0x2d,0x77,0x65,0x69,0x67,0x68,0x74,0x3a,0x20,0x62,0x6f,0x6c,0x64,0x3b,0x22,
0x3e,0x3c,0x2f,0x73,0x70,0x61,0x6e,0x3e,0x3c,0x73,0x6d,0x61,0x6c,0x6c,0x3e,0x3c,
0x73,0x70,0x61,0x6e,0x0d,0x0a,0x20,0x73,0x74,0x79,0x6c,0x65,0x3d,0x22,0x66,0x6f,
0x6e,0x74,0x2d,0x66,0x61,0x6d,0x69,0x6c,0x79,0x3a,0x20,0x56,0x65,0x72,0x64,0x61,
0x6e,0x61,0x3b,0x22,0x3e,0x4e,0x75,0x6d,0x62,0x65,0x72,0x20,0x6f,0x66,0x20,0x70,
0x61,0x67,0x65,0x20,0x68,0x69,0x74,0x73,0x3a,0x0d,0x0a,0x00};

   void ResponseHelloPage(int conn);
   void detailResponsePage(int conn, char*fileName, int fileSize);
   int ParseFileName(char* buf, char* filename_buf, int filename_buf_len);

	//@brief serve tcp connection  
	//@param conn: connection socket 
	//@retval None

void http_server_Serve(int conn)
{
		int bufLen = 1500;						//declare the variable BufLen with the value of 1500
		int Ret, Ans, file_Start, file_End, file_Size, total_Len;
		struct fs_file * file;
		unsigned char recv_buffer[1501];				//receiver buffer array value as 1501
		char fileName[32];						//set the variable fileName with an array value of 32
		
		//read in the request
		Ret = read(conn, recv_buffer, buffLen);	

		//check if Ret is less than 0
		if(Ret < 0)
		return;								//return the data
		recv_buffer[Ret] = 0;						//array list

		//check this condition if you wish to request for ST.gif
 		if (strncmp((char *)recv_buffer, "GET /STM32F4x7_files/ST.gif", 27) == 0)
  		{
    			file = fs_open("/STM32F4x7_files/ST.gif"); 				//open the file name ST.gif
    			write(conn, (const unsigned char*)(file->data), (size_t)file->len);
    			if(file) fs_close(file);
  		}//end of if

		//check this condition if you wish to request for stm32.jpeg
		else if (strncmp((char *) recv_buffer, "GET /STM32F4x7_files/stm32.jpg", 30) == 0)
		{
			file = fs_open("/STM32F4x7_files/stm32.jpg"); 
    			write(conn, (const unsigned char*)(file->data), (size_t)file->len);
    			if(file) fs_close(file);
  		}//end of else if

		//check this condition if you wish to request for ST logo.jpeg
		 else if (strncmp((char *)recv_buffer,"GET /STM32F4x7_files/logo.jpg", 29) == 0)
  		{
    			file = fs_open("/STM32F4x7_files/logo.jpg"); 
    			write(conn, (const unsigned char*)(file->data), (size_t)file->len);
    			if(file) fs_close(file);
  		}//end of else if

		else if(strncmp((char *)recv_buffer, "GET /STM32F4x7TASKS.html", 24) == 0)
  		{
    			DynWebPage(conn);	//load the dynamic page
  		}//end of else if

  		else if(strncmp((char *)recv_buffer, "GET /file_upload.html", 20) == 0)
    		{
      			//Load file_upload page
      			file = fs_open("/file_upload.html");
      			write(conn, (const unsigned char*)(file->data), (size_t)file->len);
      			if(file) fs_close(file);
    		}//end of else if

  		else if(strncmp((char *)recv_buffer, "GET /hello.html", 15) == 0)
  		{
      			ResponseHelloPage(conn);
  		}//end of else if

		 else if(strncmp((char *)recv_buffer, "POST /upload.cgi", 16) == 0)
  		{
    			Ans = ParseFileName(recv_buffer, fileName, 32);
    
			//check this condition if the Answer is not equals to 1 
			if(Ans != 1) 
			{
      				Ret = read(conn, recv_buffer, buflen);
      				Ans = ParseFileName(recv_buffer, fileName, 32);
    			}//end of if
	
			//find the start of the file
 			file_Start = FindStartOfFile(recv_buffer, Ret); 

			//check this condition if the start of the file has a value of negative 1
    			while(file_Start == -1)	
			{ 
    				Ret = read(conn,recv_buffer,buflen); 
    				total_Len += Ret;			//increment of total_Len
    				recv_buffer[Ret] = 0; 
    				file_Start = FindStartOfFile(recv_buffer, Ret); 
			}//end of while

			//start of the file is found
			file_Size = 0;		//set file size as 0
			file_End = 0;		//set file end as 0

			Ans = FindEndOfFile(recv_buffer, Ret);		//find the end of the file 
			
			//do this condition while Ans is equals -1
			 while(Ans == -1)
			{
				file_End += Ret;
				Ret = read(conn,recv_buffer,buflen);
				total_Len +=Ret;
				recv_buffer[Ret] = 0;
				Ans = FindEndOfFile(recv_buffer, Ret); 
			}//end of while			

			file_End += Ans;
			file_Size = (file_End - file_Start);

 			detailResponsePage(conn, fileName, file_size);
		}//end of else if

		else if((strncmp((char *)recv_buffer, "GET /STM32F4x7.html", 19) == 0)||(strncmp((char *)recv_buffer, "GET / ", 6) == 0))
  		{
			//Load STM32F4x7 page
			file = fs_open("/STM32F4x7.html");
    			write(conn, (const unsigned char*)(file->data), (size_t)file->len);
    			if(file) fs_close(file);
		}//end of else if

		else
  		{
    			//Load 404 page
    			file = fs_open("/404.html");
    			write(conn, (const unsigned char*)(file->data), (size_t)file->len);
    			if(file) fs_close(file);
  		}//end of else

		//close the connection socket
		Close(conn);

		
  		//@brief  http server thread 
  		//@param arg: pointer on argument(not used here) 
  		//@retval None

		static void http_server_socket_thread(void *arg)
		{
			int Sock, NewConn, Size;

			struct sockaddr_in address, remotehost;

			 //create a TCP socket
			 if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0)
			 {
    				printf("can not create socket");
    				return;
			 }//end of if

  			//bind to port 80 at any interface
  			address.sin_family = AF_INET;
  			address.sin_port = htons(80);
  			address.sin_addr.s_addr = INADDR_ANY;

		  	if (bind(sock, (struct sockaddr *)&address, sizeof (address)) < 0)
 			{
				printf("can not bind socket");
    				return;
			}//end of if

  			//listen for incoming connections (TCP listen backlog = 5)
			listen(sock, 5);
				
			size = sizeof(remotehost);

			while (1) 
  			{
    				newconn = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&size);
    				http_server_serve(newconn);
  			}//end of while
		}//end of void http_server_socket_thread
		
		//@brief  Initialize the HTTP server (start its thread) 
 		//@param  none
  		//@retval None
  
		void http_server_socket_init()
		{
  			sys_thread_new("HTTP", http_server_socket_thread, NULL, DEFAULT_THREAD_STACKSIZE * 4, WEBSERVER_THREAD_PRIO);
		}//end of void http_server_socket_init

		//@brief  Create and send a dynamic Web Page. This page contains the list of 
		//running tasks and the number of page hits. 
		//@param  conn connection socket
 		//@retval None

		void DynWebPage(int conn)
		{
  			portCHAR pagehits[10];

  			memset(PAGE_BODY, 0,512);

  			//Update the hit count
  			nPageHits++;										//increment of nPageHits by 1
  			sprintf(pagehits, "%d", nPageHits);
  			strcat(PAGE_BODY, pagehits);
  			strcat((char *) PAGE_BODY, "<pre><br>Name          State  Priority  Stack   Num" );
  			strcat((char *) PAGE_BODY, "<br>---------------------------------------------<br>"); 
    
  			//The list of tasks and their status
  			vTaskList((signed char *)(PAGE_BODY + strlen(PAGE_BODY)));
  			strcat((char *) PAGE_BODY, "<br><br>---------------------------------------------");
  			strcat((char *) PAGE_BODY, "<br>B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
  
  			//Send the dynamically generated page
  			write(conn, PAGE_START, strlen((char*)PAGE_START));
  			write(conn, PAGE_BODY, strlen(PAGE_BODY));
		}//end of DynwebPage

		/* Private functions ---------------------------------------------------------*/
		void ResponseHelloPage(int conn)
		{
  			char info[256];
  			int n;

  			//Get the lucky number
  			n = rand(); //Get a random number
  			sprintf(info, "<H1>Your lucky number is %d</H1>", n);

  			//Send the dynamically generated web page
  			write(conn, "HTTP/1.1 200 OK\n", 16); 			//Send the status line
  			write(conn, "Content-Type: text/html\n\n", 25); 	//Send the header fields followed by a blank line

  			//Now, send the HTML body
  			write(conn, "<html><body>", 12);
  			write(conn, "<H1>Hello!</H1>", 15);
  			write(conn, info, strlen((char*)info));
  			write(conn, "</body></html>", 14);
		}//end of void ResponeHelloPage

		/* Private functions ---------------------------------------------------------*/
		void detailResponsePage(int conn, char* fileName, int fileSize)
		{
  			char info[256];

  			//Get the details
  			//Send the dynamically generated web page
  			write(conn, "HTTP/1.1 200 OK\n", 16);		//Send the status line
  			write(conn, "Content-Type: text/html\n\n", 25); //Send the header fields followed by a blank line

  			//Now send the HTML body
  			write(conn, "<html><body>", 12);
  			write(conn, "<H1>Hello user!</H1>", 20);
  			sprintf(info, "<H1>File name: %s</H1>\n\n" , fileName);
  			write(conn, info, strlen((char*)info));
  			sprintf(info, "<H2>File size: %d</H2>\n\n" , fileSize);
  			write(conn, info, strlen((char*)info));
  			write(conn, "</body></html>", 14);
		}//end of void detailResponsePage

		int ParseFileName(char* buf, char* filename_buf, int filename_buf_len)
 		{
   			int i;
   			char* ptr;

   			//Find string "filename = " in buffer
   			ptr = strstr(buf, "filename=");
   			
			if(ptr) 
			{ 
				//Found!
     				//Advance ptr to the start of filename string 
     				ptr = ptr + strlen("filename=");

     				i = 0;

     				//Copy filename string to filename_buf char by char until '\r' is found or filename_buf is almost full
     				while((ptr[i] != '\r') && (i < (filename_buf_len - 1))) 
				{
       					filename_buf[i] = ptr[i];
       					i++;							//increment of i by 1
     				}//end of while

     			filename_buf[i] = 0;							//Terminate filename with a null char
     			return 1;
   			}//end of if

   			return 0;
 		}//end of int ParseFileName
		
		int FindStartOfFile(char* buf, int len) //important all the way till the end
		{
  			int i, offset = -1;
  	
			for(i = 0; i < len; i++) 
			{
    				if(strncmp((char*)(buf + i), "octet-stream\r", 13) == 0) 
				{
      					offset = i + 16;
      					break;
    				}//end of if
  			}//end of for 
  			
			return offset;
		}//end of FindStartOfFile

		int FindEndOfFile(char* buf, int len)
		{
  			int i = 4;
  
			//search backward as strncmp cannot be used on binary data
  			while(strncmp((char*)(buf + len - i), "\r\n--", 4)) 
			{
    				i++;
    				if(i > len) 
				return -1;
  			}//end of while

  			return (len - i);
		}//end of int FindEndOfFile
}//end of void http_server_serve
/*--------------------------------------------------- End Of Entire Program -------------------------------------------------------------------------------*/